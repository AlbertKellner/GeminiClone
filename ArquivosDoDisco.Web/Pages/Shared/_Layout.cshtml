<html>
<head>
    <script src="//unpkg.com/d3"></script>
    <script src="//unpkg.com/sunburst-chart"></script>
</head>
<body>
    @RenderBody()

    <form>
        <label for="getDisks">GetDisks:</label>
        <select id="getDisks" onchange="getStructure(this.value);">
            <!-- Dropdown options will be populated with JavaScript -->
        </select>
        <div id="FolderItems"></div>
    </form>

    <div>
        <div class="chart" id="sunburstChart"></div>
    </div>

    <script>
        myChart = Sunburst();

        function fetchDisks() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var disks = JSON.parse(xhr.responseText);
                    populateDropdown(disks);
                }
            };
            xhr.open("GET", "/api/Structure", true);
            xhr.send();
        }

        // JavaScript function to populate the dropdown with the fetched data
        function populateDropdown(disks) {
            var dropdown = document.getElementById("getDisks");

            var option = document.createElement("option");
            option.value = "";
            option.text = "";
            dropdown.add(option);

            for (var i = 0; i < disks.length; i++) {
                var option = document.createElement("option");
                option.value = disks[i];
                option.text = disks[i];
                dropdown.add(option);
            }
        }

        function getStructure(selectedDrive) {
            document.querySelector(".chart").innerHTML = "Loading...";

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var data = JSON.parse(xhr.responseText);
                    console.log(data);
                    generateGraph(data);
                }
            };
            xhr.open("GET", "/api/structure/" + selectedDrive.charAt(0), true);
            xhr.send();
        }

        function generateGraph(data) {
            myChart = Sunburst();

            //data = {
            //    name: 'root',
            //    value: 900,
            //    color: "#FFF111",
            //    children: [
            //        { name: 'child #1', value: 100, color: "#FFF555" },
            //        { name: 'child #2', value: 300 },
            //        {
            //            name: 'child #3',
            //            value: 300,
            //            children: [
            //                { name: 'grandchild #1', value: 50 },
            //                { name: 'grandchild #2', value: 75 },
            //                { name: 'grandchild #3', value: 125 },
            //            ]
            //        }
            //    ]
            //};

            document.querySelector(".chart").innerHTML = "";
            
            removeValueIfChildren(data);

            const color = d3.scaleOrdinal(d3.schemePaired);

            myChart
                .data(data)
                .label('name')
                .size('value')
                .minSliceAngle(.4)
                .excludeRoot(true)
                //.maxLevels(6)
                .showLabels(true)
                //.centerRadius(.05)
                //.radiusScaleExponent(.9)
                .labelOrientation('angular')
                .onHover((node, event) => console.log(node))
                //.onClick((node, event) => console.log(node))

                //pastas
                //.onClick((node, event) => {
                //    if (node.children) {
                //        displayFolderItems(node);
                //    }
                //})

                //.focusOnNode({ name: 'Common7' })
                //.color('color')
                //.color((d, parent) => color(parent ? parent.data.name : null))
                .sort((a, b) => b.value - a.value)
                .tooltipContent((d, node) => `Size: <i>${node.value}</i>`)
                //.handleNonFittingLabel((label, availablePx) => {
                //    const numFitChars = Math.round(availablePx / 7); // ~7px per char
                //    return numFitChars < 5
                //        ? null
                //        : `${label.slice(0, Math.round(numFitChars) - 3)}...`;
                //})
                (document.getElementById("sunburstChart"));
        }

        //pastas
        //function displayFolderItems(node) {
        //    var folderItemsDiv = document.getElementById("FolderItems");
        //    folderItemsDiv.innerHTML = ""; // clear the div

        //    node.children.forEach(function (item) {
        //        var div = document.createElement("div");
        //        div.textContent = item.name;
        //        folderItemsDiv.appendChild(div);
        //    });
        //}

        function removeValueIfChildren(node) {
            if (node.children) {
                delete node.value;

                node.children.forEach(removeValueIfChildren);
            }
        }

        fetchDisks();
    </script>
</body>
</html>